// Code generated by protoc-gen-go. DO NOT EDIT.
// source: calculator.proto

package calculatorpb

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type CalculatorRequest struct {
	Number               int32    `protobuf:"varint,1,opt,name=number,proto3" json:"number,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CalculatorRequest) Reset()         { *m = CalculatorRequest{} }
func (m *CalculatorRequest) String() string { return proto.CompactTextString(m) }
func (*CalculatorRequest) ProtoMessage()    {}
func (*CalculatorRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c686ea360062a8cf, []int{0}
}

func (m *CalculatorRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CalculatorRequest.Unmarshal(m, b)
}
func (m *CalculatorRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CalculatorRequest.Marshal(b, m, deterministic)
}
func (m *CalculatorRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CalculatorRequest.Merge(m, src)
}
func (m *CalculatorRequest) XXX_Size() int {
	return xxx_messageInfo_CalculatorRequest.Size(m)
}
func (m *CalculatorRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CalculatorRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CalculatorRequest proto.InternalMessageInfo

func (m *CalculatorRequest) GetNumber() int32 {
	if m != nil {
		return m.Number
	}
	return 0
}

type CalculatorResponse struct {
	Result               int32    `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CalculatorResponse) Reset()         { *m = CalculatorResponse{} }
func (m *CalculatorResponse) String() string { return proto.CompactTextString(m) }
func (*CalculatorResponse) ProtoMessage()    {}
func (*CalculatorResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c686ea360062a8cf, []int{1}
}

func (m *CalculatorResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CalculatorResponse.Unmarshal(m, b)
}
func (m *CalculatorResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CalculatorResponse.Marshal(b, m, deterministic)
}
func (m *CalculatorResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CalculatorResponse.Merge(m, src)
}
func (m *CalculatorResponse) XXX_Size() int {
	return xxx_messageInfo_CalculatorResponse.Size(m)
}
func (m *CalculatorResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CalculatorResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CalculatorResponse proto.InternalMessageInfo

func (m *CalculatorResponse) GetResult() int32 {
	if m != nil {
		return m.Result
	}
	return 0
}

type CalculatorAverageResponse struct {
	Result               float32  `protobuf:"fixed32,1,opt,name=result,proto3" json:"result,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CalculatorAverageResponse) Reset()         { *m = CalculatorAverageResponse{} }
func (m *CalculatorAverageResponse) String() string { return proto.CompactTextString(m) }
func (*CalculatorAverageResponse) ProtoMessage()    {}
func (*CalculatorAverageResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c686ea360062a8cf, []int{2}
}

func (m *CalculatorAverageResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CalculatorAverageResponse.Unmarshal(m, b)
}
func (m *CalculatorAverageResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CalculatorAverageResponse.Marshal(b, m, deterministic)
}
func (m *CalculatorAverageResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CalculatorAverageResponse.Merge(m, src)
}
func (m *CalculatorAverageResponse) XXX_Size() int {
	return xxx_messageInfo_CalculatorAverageResponse.Size(m)
}
func (m *CalculatorAverageResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CalculatorAverageResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CalculatorAverageResponse proto.InternalMessageInfo

func (m *CalculatorAverageResponse) GetResult() float32 {
	if m != nil {
		return m.Result
	}
	return 0
}

type CalculatorOddEvenResponse struct {
	Result               int32    `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"`
	Type                 string   `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CalculatorOddEvenResponse) Reset()         { *m = CalculatorOddEvenResponse{} }
func (m *CalculatorOddEvenResponse) String() string { return proto.CompactTextString(m) }
func (*CalculatorOddEvenResponse) ProtoMessage()    {}
func (*CalculatorOddEvenResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c686ea360062a8cf, []int{3}
}

func (m *CalculatorOddEvenResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CalculatorOddEvenResponse.Unmarshal(m, b)
}
func (m *CalculatorOddEvenResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CalculatorOddEvenResponse.Marshal(b, m, deterministic)
}
func (m *CalculatorOddEvenResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CalculatorOddEvenResponse.Merge(m, src)
}
func (m *CalculatorOddEvenResponse) XXX_Size() int {
	return xxx_messageInfo_CalculatorOddEvenResponse.Size(m)
}
func (m *CalculatorOddEvenResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CalculatorOddEvenResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CalculatorOddEvenResponse proto.InternalMessageInfo

func (m *CalculatorOddEvenResponse) GetResult() int32 {
	if m != nil {
		return m.Result
	}
	return 0
}

func (m *CalculatorOddEvenResponse) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

type ArmstrongNumberResponse struct {
	Result               int32    `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"`
	Similarity           bool     `protobuf:"varint,2,opt,name=similarity,proto3" json:"similarity,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ArmstrongNumberResponse) Reset()         { *m = ArmstrongNumberResponse{} }
func (m *ArmstrongNumberResponse) String() string { return proto.CompactTextString(m) }
func (*ArmstrongNumberResponse) ProtoMessage()    {}
func (*ArmstrongNumberResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c686ea360062a8cf, []int{4}
}

func (m *ArmstrongNumberResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ArmstrongNumberResponse.Unmarshal(m, b)
}
func (m *ArmstrongNumberResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ArmstrongNumberResponse.Marshal(b, m, deterministic)
}
func (m *ArmstrongNumberResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ArmstrongNumberResponse.Merge(m, src)
}
func (m *ArmstrongNumberResponse) XXX_Size() int {
	return xxx_messageInfo_ArmstrongNumberResponse.Size(m)
}
func (m *ArmstrongNumberResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ArmstrongNumberResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ArmstrongNumberResponse proto.InternalMessageInfo

func (m *ArmstrongNumberResponse) GetResult() int32 {
	if m != nil {
		return m.Result
	}
	return 0
}

func (m *ArmstrongNumberResponse) GetSimilarity() bool {
	if m != nil {
		return m.Similarity
	}
	return false
}

func init() {
	proto.RegisterType((*CalculatorRequest)(nil), "calculator.CalculatorRequest")
	proto.RegisterType((*CalculatorResponse)(nil), "calculator.CalculatorResponse")
	proto.RegisterType((*CalculatorAverageResponse)(nil), "calculator.CalculatorAverageResponse")
	proto.RegisterType((*CalculatorOddEvenResponse)(nil), "calculator.CalculatorOddEvenResponse")
	proto.RegisterType((*ArmstrongNumberResponse)(nil), "calculator.ArmstrongNumberResponse")
}

func init() { proto.RegisterFile("calculator.proto", fileDescriptor_c686ea360062a8cf) }

var fileDescriptor_c686ea360062a8cf = []byte{
	// 307 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x53, 0xdf, 0x4b, 0xc3, 0x30,
	0x10, 0x5e, 0xa6, 0x6e, 0x7a, 0x0c, 0x7f, 0xe4, 0x41, 0xa7, 0xe0, 0x18, 0x11, 0x61, 0xa0, 0x8c,
	0xe1, 0xfe, 0x82, 0x29, 0x2a, 0xbe, 0xa8, 0xeb, 0x10, 0xc1, 0xb7, 0xac, 0x3b, 0x46, 0xa1, 0x6d,
	0xba, 0x4b, 0x5a, 0xd8, 0x3f, 0xe6, 0xdf, 0x27, 0xeb, 0xea, 0x1a, 0xaa, 0xa5, 0xa0, 0x6f, 0xb9,
	0xbb, 0xef, 0xbe, 0x7c, 0xf9, 0xee, 0x02, 0x87, 0xae, 0xf4, 0xdd, 0xd8, 0x97, 0x46, 0x51, 0x3f,
	0x22, 0x65, 0x14, 0x87, 0x3c, 0x23, 0xae, 0xe0, 0xe8, 0x6e, 0x13, 0x39, 0xb8, 0x88, 0x51, 0x1b,
	0x7e, 0x0c, 0x8d, 0x30, 0x0e, 0xa6, 0x48, 0x6d, 0xd6, 0x65, 0xbd, 0x1d, 0x27, 0x8b, 0xc4, 0x35,
	0x70, 0x1b, 0xac, 0x23, 0x15, 0x6a, 0x5c, 0xa1, 0x09, 0x75, 0xec, 0x9b, 0x6f, 0xf4, 0x3a, 0x12,
	0x43, 0x38, 0xcd, 0xd1, 0xa3, 0x04, 0x49, 0xce, 0xb1, 0xa4, 0xa9, 0xbe, 0x69, 0x7a, 0xb4, 0x9b,
	0x5e, 0x66, 0xb3, 0xfb, 0x04, 0xc3, 0xaa, 0x9b, 0x38, 0x87, 0x6d, 0xb3, 0x8c, 0xb0, 0x5d, 0xef,
	0xb2, 0xde, 0x9e, 0x93, 0x9e, 0xc5, 0x18, 0x4e, 0x46, 0x14, 0x68, 0x43, 0x2a, 0x9c, 0x3f, 0xa7,
	0xf2, 0x2b, 0x69, 0x3a, 0x00, 0xda, 0x0b, 0x3c, 0x5f, 0x92, 0x67, 0x96, 0x29, 0xd9, 0xae, 0x63,
	0x65, 0x6e, 0x3e, 0xb7, 0x6c, 0xb3, 0x26, 0x48, 0x89, 0xe7, 0x22, 0x7f, 0x82, 0xc6, 0x64, 0x11,
	0x4b, 0x42, 0x7e, 0xde, 0xb7, 0xac, 0xfe, 0xe1, 0xea, 0x59, 0xa7, 0xac, 0xbc, 0x96, 0x25, 0x6a,
	0xfc, 0x1d, 0x0e, 0x0a, 0x9a, 0xab, 0x38, 0x2f, 0xec, 0x72, 0xc9, 0x7b, 0x45, 0x8d, 0x8f, 0xa1,
	0xf5, 0x4a, 0x5e, 0x80, 0x0f, 0xd2, 0x35, 0x8a, 0xf4, 0xbf, 0x95, 0x0e, 0x18, 0x9f, 0x40, 0x33,
	0x9b, 0x69, 0x15, 0xdb, 0xe5, 0xef, 0xe5, 0xc2, 0x46, 0x88, 0x5a, 0x8f, 0xf1, 0x37, 0x68, 0x66,
	0x33, 0xff, 0x23, 0x69, 0x61, 0x63, 0x56, 0xa4, 0x03, 0x76, 0xbb, 0xff, 0xd1, 0xca, 0xd1, 0xd1,
	0x74, 0xda, 0x48, 0xff, 0xc1, 0xf0, 0x2b, 0x00, 0x00, 0xff, 0xff, 0x3f, 0x0b, 0x06, 0xe4, 0x1b,
	0x03, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// CalculatorServiceClient is the client API for CalculatorService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CalculatorServiceClient interface {
	// Unary
	Square(ctx context.Context, in *CalculatorRequest, opts ...grpc.CallOption) (*CalculatorResponse, error)
	//unary armstrong
	ArmstrongNumber(ctx context.Context, in *CalculatorRequest, opts ...grpc.CallOption) (*ArmstrongNumberResponse, error)
	// Server Streaming
	PrimeFactors(ctx context.Context, in *CalculatorRequest, opts ...grpc.CallOption) (CalculatorService_PrimeFactorsClient, error)
	// Client Streaming
	Average(ctx context.Context, opts ...grpc.CallOption) (CalculatorService_AverageClient, error)
	// BiDirectional Streaming
	OddEven(ctx context.Context, opts ...grpc.CallOption) (CalculatorService_OddEvenClient, error)
}

type calculatorServiceClient struct {
	cc *grpc.ClientConn
}

func NewCalculatorServiceClient(cc *grpc.ClientConn) CalculatorServiceClient {
	return &calculatorServiceClient{cc}
}

func (c *calculatorServiceClient) Square(ctx context.Context, in *CalculatorRequest, opts ...grpc.CallOption) (*CalculatorResponse, error) {
	out := new(CalculatorResponse)
	err := c.cc.Invoke(ctx, "/calculator.CalculatorService/Square", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *calculatorServiceClient) ArmstrongNumber(ctx context.Context, in *CalculatorRequest, opts ...grpc.CallOption) (*ArmstrongNumberResponse, error) {
	out := new(ArmstrongNumberResponse)
	err := c.cc.Invoke(ctx, "/calculator.CalculatorService/ArmstrongNumber", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *calculatorServiceClient) PrimeFactors(ctx context.Context, in *CalculatorRequest, opts ...grpc.CallOption) (CalculatorService_PrimeFactorsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_CalculatorService_serviceDesc.Streams[0], "/calculator.CalculatorService/PrimeFactors", opts...)
	if err != nil {
		return nil, err
	}
	x := &calculatorServicePrimeFactorsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CalculatorService_PrimeFactorsClient interface {
	Recv() (*CalculatorResponse, error)
	grpc.ClientStream
}

type calculatorServicePrimeFactorsClient struct {
	grpc.ClientStream
}

func (x *calculatorServicePrimeFactorsClient) Recv() (*CalculatorResponse, error) {
	m := new(CalculatorResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *calculatorServiceClient) Average(ctx context.Context, opts ...grpc.CallOption) (CalculatorService_AverageClient, error) {
	stream, err := c.cc.NewStream(ctx, &_CalculatorService_serviceDesc.Streams[1], "/calculator.CalculatorService/Average", opts...)
	if err != nil {
		return nil, err
	}
	x := &calculatorServiceAverageClient{stream}
	return x, nil
}

type CalculatorService_AverageClient interface {
	Send(*CalculatorRequest) error
	CloseAndRecv() (*CalculatorAverageResponse, error)
	grpc.ClientStream
}

type calculatorServiceAverageClient struct {
	grpc.ClientStream
}

func (x *calculatorServiceAverageClient) Send(m *CalculatorRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *calculatorServiceAverageClient) CloseAndRecv() (*CalculatorAverageResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(CalculatorAverageResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *calculatorServiceClient) OddEven(ctx context.Context, opts ...grpc.CallOption) (CalculatorService_OddEvenClient, error) {
	stream, err := c.cc.NewStream(ctx, &_CalculatorService_serviceDesc.Streams[2], "/calculator.CalculatorService/OddEven", opts...)
	if err != nil {
		return nil, err
	}
	x := &calculatorServiceOddEvenClient{stream}
	return x, nil
}

type CalculatorService_OddEvenClient interface {
	Send(*CalculatorRequest) error
	Recv() (*CalculatorOddEvenResponse, error)
	grpc.ClientStream
}

type calculatorServiceOddEvenClient struct {
	grpc.ClientStream
}

func (x *calculatorServiceOddEvenClient) Send(m *CalculatorRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *calculatorServiceOddEvenClient) Recv() (*CalculatorOddEvenResponse, error) {
	m := new(CalculatorOddEvenResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// CalculatorServiceServer is the server API for CalculatorService service.
type CalculatorServiceServer interface {
	// Unary
	Square(context.Context, *CalculatorRequest) (*CalculatorResponse, error)
	//unary armstrong
	ArmstrongNumber(context.Context, *CalculatorRequest) (*ArmstrongNumberResponse, error)
	// Server Streaming
	PrimeFactors(*CalculatorRequest, CalculatorService_PrimeFactorsServer) error
	// Client Streaming
	Average(CalculatorService_AverageServer) error
	// BiDirectional Streaming
	OddEven(CalculatorService_OddEvenServer) error
}

// UnimplementedCalculatorServiceServer can be embedded to have forward compatible implementations.
type UnimplementedCalculatorServiceServer struct {
}

func (*UnimplementedCalculatorServiceServer) Square(ctx context.Context, req *CalculatorRequest) (*CalculatorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Square not implemented")
}
func (*UnimplementedCalculatorServiceServer) ArmstrongNumber(ctx context.Context, req *CalculatorRequest) (*ArmstrongNumberResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ArmstrongNumber not implemented")
}
func (*UnimplementedCalculatorServiceServer) PrimeFactors(req *CalculatorRequest, srv CalculatorService_PrimeFactorsServer) error {
	return status.Errorf(codes.Unimplemented, "method PrimeFactors not implemented")
}
func (*UnimplementedCalculatorServiceServer) Average(srv CalculatorService_AverageServer) error {
	return status.Errorf(codes.Unimplemented, "method Average not implemented")
}
func (*UnimplementedCalculatorServiceServer) OddEven(srv CalculatorService_OddEvenServer) error {
	return status.Errorf(codes.Unimplemented, "method OddEven not implemented")
}

func RegisterCalculatorServiceServer(s *grpc.Server, srv CalculatorServiceServer) {
	s.RegisterService(&_CalculatorService_serviceDesc, srv)
}

func _CalculatorService_Square_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CalculatorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CalculatorServiceServer).Square(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/calculator.CalculatorService/Square",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CalculatorServiceServer).Square(ctx, req.(*CalculatorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CalculatorService_ArmstrongNumber_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CalculatorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CalculatorServiceServer).ArmstrongNumber(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/calculator.CalculatorService/ArmstrongNumber",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CalculatorServiceServer).ArmstrongNumber(ctx, req.(*CalculatorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CalculatorService_PrimeFactors_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(CalculatorRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CalculatorServiceServer).PrimeFactors(m, &calculatorServicePrimeFactorsServer{stream})
}

type CalculatorService_PrimeFactorsServer interface {
	Send(*CalculatorResponse) error
	grpc.ServerStream
}

type calculatorServicePrimeFactorsServer struct {
	grpc.ServerStream
}

func (x *calculatorServicePrimeFactorsServer) Send(m *CalculatorResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _CalculatorService_Average_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(CalculatorServiceServer).Average(&calculatorServiceAverageServer{stream})
}

type CalculatorService_AverageServer interface {
	SendAndClose(*CalculatorAverageResponse) error
	Recv() (*CalculatorRequest, error)
	grpc.ServerStream
}

type calculatorServiceAverageServer struct {
	grpc.ServerStream
}

func (x *calculatorServiceAverageServer) SendAndClose(m *CalculatorAverageResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *calculatorServiceAverageServer) Recv() (*CalculatorRequest, error) {
	m := new(CalculatorRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _CalculatorService_OddEven_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(CalculatorServiceServer).OddEven(&calculatorServiceOddEvenServer{stream})
}

type CalculatorService_OddEvenServer interface {
	Send(*CalculatorOddEvenResponse) error
	Recv() (*CalculatorRequest, error)
	grpc.ServerStream
}

type calculatorServiceOddEvenServer struct {
	grpc.ServerStream
}

func (x *calculatorServiceOddEvenServer) Send(m *CalculatorOddEvenResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *calculatorServiceOddEvenServer) Recv() (*CalculatorRequest, error) {
	m := new(CalculatorRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _CalculatorService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "calculator.CalculatorService",
	HandlerType: (*CalculatorServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Square",
			Handler:    _CalculatorService_Square_Handler,
		},
		{
			MethodName: "ArmstrongNumber",
			Handler:    _CalculatorService_ArmstrongNumber_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "PrimeFactors",
			Handler:       _CalculatorService_PrimeFactors_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Average",
			Handler:       _CalculatorService_Average_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "OddEven",
			Handler:       _CalculatorService_OddEven_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "calculator.proto",
}
